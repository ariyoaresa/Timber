<!-- html-footer-scripts -->
{% comment %}
JS Plugins
{% endcomment %}
{{ 'slick.js' | asset_url | script_tag }}
{{ 'moment.min.js' | asset_url | script_tag }}
{{ 'api.jquery.js' | shopify_asset_url | script_tag }}
{{ 'handlebars.min.js' | asset_url | script_tag }}
{{ 'jquery.loupe.min.js' | asset_url | script_tag }}
{{ 'smooth-scroll.min.js' | asset_url | script_tag }}
{{ 'jquery.leanModal.min.js' | asset_url | script_tag }}

{% comment %}
An (almost) empty JS file for you to place your code
{% endcomment %}
{{ 'shop.js' | asset_url | script_tag }}

{% comment %}
Ajaxify your cart with this plugin. Adding a product will reveal a drawer, modal, or confirmation button.
Enabled by default in theme settings.

Ajaxify Cart Documentation:
- http://shopify.com/timber#ajax-cart
{% endcomment %}
{% if settings.ajax_cart and top-level-layout != 'simplified' %}
  {% include 'ajax-cart-template' %}
  {{ 'ajaxify.js' | asset_url | script_tag }}
  <script>

      jQuery(function($) {
          ajaxifyShopify.init({
              method: '{{ settings.ajax_cart_method }}', // Method options are drawer, modal, and flip. Default is drawer.
              wrapperClass: null, // The class that defines your site width. Default is null.
              formSelector: 'form[action^="/cart/add"]', // Default is form[action^="/cart/add"].
              addToCartSelector: '.add-to-cart-button', // Default is input[type="submit"] within 'formSelector'.
              cartCountSelector: '#cartCount', // Update number of items in the cart when a product is added. Default is null.
              cartCostSelector: '#cartCost', // Update the total cart cost when a product is added. Default is null.
              toggleCartButton: '#cartToggle', // To toggle drawer/modal cart, include the selector here. Default is null and will take you to /cart page.
              useCartTemplate: false, // True to use cart.liquid markup. False to use handlebars.js for template. Default is true.
              btnClass: 'btn', // Your main button class for styling purposes if useCartTemplate is set to false. Default is null.
              moneyFormat: {{ shop.money_format | json }}, // Your shop money format, defined in liquid.
              disableAjaxCart: false, // If for some reason you want to disable the cart, set to true. Default is false.
              enableQtySelectors: true, // Enable the quantity selectors on your templates, even if disableAjaxCart is false. Default is true.
              prependDrawerTo: '.container', // The element selector where the cart is prepended. This is used for the drawer and flip methods. Default is 'body'.
              onToggleCallback: null
          });
      });
  </script>
{% endif %}


<!-- SpurIT_Wishlist_Include -->
{% include 'wishlist-popup' %}
<!-- /SpurIT_Wishlist_Include -->

{% include 'loader-animation-template' %}

{% if template contains 'product' %}

  {% comment %}
  For product swatches
  {% endcomment %}
  <script>
      jQuery(function() {
          jQuery('.swatch :radio').change(function() {
              var optionIndex = jQuery(this).closest('.swatch').attr('data-option-index');
              var optionValue = jQuery(this).val();
              jQuery(this)
      .closest('form')
      .find('.single-option-selector')
      .eq(optionIndex)
      .val(optionValue)
      .trigger('change');
          });
      });
  </script>

  {% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
  - Hides your <select> tag from above
  - Breaks out the product variants into separate product options, if more than one exists
  - Generates a <select> tag for each product option

  Callback notes:
  - Keep the callback available to the global scope (window.selectCallback) so that advanced
  addons can override it.
  * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
  {% endcomment %}

  {{ 'option_selection.js' | shopify_asset_url | script_tag }}
  <script>

      var selectCallback = function(variant, selector) {

          var addToCart = $('#addToCart'),
          productPrice = $('#productPrice'),
          comparePrice = $('#comparePrice');

          if (variant) {
              if (variant.available) {
                  // We have a valid product variant, so enable the submit button
                  addToCart.removeClass('disabled').prop('disabled', false);
                  addToCart.find('.label').text('Add to Cart');

              } else {
                  console.log('sold out');

                  // Variant is sold out, disable the submit button
                  addToCart.addClass('disabled').prop('disabled', true);
                  addToCart.find('.label').text('Sold Out');
              }

              // Regardless of stock, update the product price
              productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

          } else {
              // The variant doesn't exist, disable submit button.
              // This may be an error or notice that a specific variant is not available.
              // To only show available variants, implement linked product options:
              //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
              addToCart.val('Unavailable').addClass('disabled').prop('disabled', true);
          }

          // BEGIN SWATCHES
          if (variant) {
              var form = jQuery('#' + selector.domIdPrefix).closest('form'),
              length = variant.options.length, 
              radioButton, 
              radioSelector;

              for (var i = 0; i < length; i++) {

                  radioSelector = '.swatch[data-option-index="';
                  radioSelector += i + '"] :radio[value="';
                  radioSelector += variant.options[i] +'"]';

                  radioButton = form.find(radioSelector);

                  if (radioButton.size()) {
                      radioButton.get(0).checked = true;
                  }
              }
          }
          // END SWATCHES
      };

      jQuery(function($) {

          new Shopify.OptionSelectors('productSelect', {
              product: {{ product | json }},
              onVariantSelected: selectCallback
          });

          // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
          {% if product.options.size == 1 and product.options.first != 'Title' %}
          $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
          {% endif %}

          // Hide selectors if we only have 1 variant and its title contains 'Default'.
          {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
          $('.selector-wrapper').hide();
          {% endif %}

          // Auto-select first available variant on page load. Otherwise the product looks sold out.
          {% assign found_one_in_stock = false %}
          {% for variant in product.variants %}
          {% if variant.available and found_one_in_stock == false %}
          {% assign found_one_in_stock = true %}
          {% for option in product.options %}
          $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }}).trigger('change');
          {% endfor %}
          {% endif %}
          {% endfor %}


          {% comment %}dress sizes popup.{% endcomment %}
          {% for option in product.options %}
          {% if option == 'Size' %}
          var colorOptionIndex =  {{ forloop.index0 }};
          $('.selector-wrapper:eq(' + colorOptionIndex + ')').append('<a href="#dress-sizing-modal-content" id="dress-sizes-link" class="js-open-modal dress-sizing-link">Size Chart</a>');
          $('.js-open-modal').leanModal({closeButton: '.modal-close-link'});
          
          {% endif %}
          {% endfor %}

      });

      // Initialize image zoom on the product page.
      $('#productPhotoImg').loupe();

  </script>

{% endif %}
