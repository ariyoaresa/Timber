{% comment %}

Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
and allow search engines to easily understand what the content is.

For more information on these Scheme.org tags, visit:
- http://schema.org/docs/gs.html

{% endcomment %}

{% include 'capture-style-number' %}

<div class="product-detail-hero" itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'grande' }}">
  <meta itemprop="priceCurrency" content="{{ shop.currency }}">
  {% if product.available %}
    <link itemprop="availability" href="http://schema.org/InStock">
  {% else %}
    <link itemprop="availability" href="http://schema.org/OutOfStock">
  {% endif %}

  <div class="wrapper">

    <div class="product-info-block" itemprop="offers" itemscope itemtype="http://schema.org/Offer">

      <div class="breadcrumb-row">
        
        {% include 'breadcrumb' %}

      </div>

      <div class="product-meta-block">

        <h2 itemprop="name">{{ product.title }}</h2>

        <div class="product-price" id="productPrice" itemprop="price">
          US {{ product.price | money }}
        </div>

        {% if style_number != 0 %}
          <div class="product-style-number">
            Style #: {{ style_number }}
          </div>
        {% endif %}
        
      </div>

      <div class="product-purchase-block">

        {% comment %}
        ID addToCartForm is a selector for the ajaxify cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="addToCartForm">

          {% comment %}
          Add product variants as a dropdown.
          - By default, each variant (or combination of variants) will display as its own <option>
          - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

          You can leverage jQuery to add a callback on page load and each time the select element changes:
          - Include option_selection.js (as seen at the bottom of this file)
          - This allows you to use JavaScript anytime the variant dropdown changes
          - This also separates out your variant options (ie. size, color, etc.) to separate select elements

          For more information on products with multiple options, visit:
          - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid

          {% endcomment %}

          <div class="product-options-block">
            {% if product.available and product.variants.size > 1 %}
              {% include 'swatch' with 'Color' %}
            {% endif %}

            <select name="id" id="productSelect" class="product-variants">
              {% for variant in product.variants %}
                {% if variant.available %}

                  {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                  {% endcomment %}
                  <option value="{{variant.id}}">
                    {{ variant.title }} - {{ variant.price | money_with_currency }}
                  </option>

                {% else %}
                  <option disabled="disabled">
                    {{ variant.title }} - Sold out
                  </option>
                {% endif %}
              {% endfor %}
            </select>
          </div>

          <button type="submit" name="add" id="addToCart">
            <span class="label">Add to cart</span>
            <span class="icon"></span>
          </button>

        </form>

        <div class="product-offer">

          <span class="icon"></span>
          <span class="text">Free shipping on int&rsquo;l orders $1,000+</span>

        </div>

      </div>

      <div class="product-share-block">

        <div class="label">Share:</div>

        {% include 'social-sharing-buttons' %}

      </div>

      <div class="product-description-block" itemprop="description">
        <div class="content">
          <h6>Details:</h6>
          {{ product.description }}
        </div>
        <a class="expand" href="#">
          <span class="label">More Details</span><span class="icon"></span>
        </a>
      </div>

    </div>


    {% comment %}
    If we only have one product image, show a large version of it.
    If we have more than 1, show it then loop through the rest as thumbnails.
    {% endcomment %}
    <div class="product-image-main-block" id="productPhoto">
      
      {% if product.images.size == 0 %}

        <img src="{{ '' | product_img_url: 'grande' }}" alt="" id="productPhotoImg">

      {% else %}

        <img src="{{ product.featured_image.src | product_img_url: 'grande' }}" alt="{{ product.featured_image.alt | escape }}" id="productPhotoImg">

      {% endif %}

    </div>

    {% if product.images.size == 0 %}
      {% comment %}
      If we have more than one product image, loop through them and create thumbnails.

      By default, images will link to their grande size (600x600).
      Thumbnail swapping is enabled in shop.js.liquid.
      {% endcomment %}
      {% if product.images.size > 1 %}

        <div class="product-image-thumbs-block">

          <ul class="product-photo-thumbs grid-uniform" id="productThumbs">

            {% for image in product.images %}
              <li class="grid-item one-quarter">
                <a href="{{ image.src | product_img_url: 'master' }}" class="product-photo-thumb">
                  <img src="{{ image.src | product_img_url: 'small' }}" alt="{{ image.alt | escape }}">
                </a>
              </li>
            {% endfor %}

          </ul>

        </div>

      {% endif %}

    {% endif %}

  </div>
  
</div>

{% comment %}
If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
in the URL, we can show next/previous links to other products in the collection.
{% endcomment %}
{% if collection %}

  <div class="related-products-hero">

    <div class="wrapper">
      
      <h2>Other styles you might like:</h2>

      <div class="carousel-block">

        {% comment %}
        Use class grid-uniform to have evenly sized columns clear
        each other properly at each breakpoint.
        {% endcomment %}

        {% comment %}
        Loop through our products in the current collection.
        See the snippet 'product-grid-item' for the layout.
        {% endcomment %}

        {% comment %}
        Capture the current product for this page. This allows the loop to use the name 'product'
        {% endcomment %}
        {% assign this_product = product %}

        {% for product in collection.products limit:5 %}

          {% if product.id != this_product.id %}

            {% include 'product-grid-item' %}

          {% endif %}

        {% endfor %}


        {% if paginate.pages > 1 %}
          <div class="text-center">
            {% include 'pagination-custom' %}
          </div>
        {% endif %}


        {% comment %}
        Restore the currnt page product.
        {% endcomment %}
        {% assign product = this_product %}

      </div>

    </div>
    
  </div>

{% endif %}


<hr class="hr-4-col" />

<div class="social-hero">

  <h2>Keep in Touch:</h2>

  {% include 'newsletter-signup-block' %}

  {% include 'social-link-block' %}

</div>

{% comment %}
To take advantage of a callback on the select dropdown, add option_selection.js
and customize the JS below as you need. This is only needed on pages where
product variants are accessible, so doesn't need to live in theme.liquid.

Currently, the code below does:
- Hides your <select> tag from above
- Breaks out the product variants into separate product options, if more than one exists
- Generates a <select> tag for each product option

Callback notes:
- Keep the callback available to the global scope (window.selectCallback) so that advanced
addons can override it.
* E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

    var selectCallback = function(variant, selector) {

        var addToCart = $('#addToCart'),
        productPrice = $('#productPrice'),
        comparePrice = $('#comparePrice');

        if (variant) {
            if (variant.available) {
                // We have a valid product variant, so enable the submit button
                addToCart.removeClass('disabled').prop('disabled', false).val('Add to Cart');

            } else {
                // Variant is sold out, disable the submit button
                addToCart.val('Sold Out').addClass('disabled').prop('disabled', true);
            }

            // Regardless of stock, update the product price
            productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

            // Also update and show the product's compare price if necessary
            if ( variant.compare_at_price > variant.price ) {
                comparePrice.html(
                    'Compare at: ' + Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}")
                ).show();
            } else {
                comparePrice.hide();
            }

        } else {
            // The variant doesn't exist, disable submit button.
            // This may be an error or notice that a specific variant is not available.
            // To only show available variants, implement linked product options:
            //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
            addToCart.val('Unavailable').addClass('disabled').prop('disabled', true);
        }

        // BEGIN SWATCHES
        if (variant) {
            var form = jQuery('#' + selector.domIdPrefix).closest('form'),
            length = variant.options.length, 
            radioButton, 
            radioSelector;

            for (var i = 0; i < length; i++) {

                radioSelector = '.swatch[data-option-index="';
                radioSelector += i + '"] :radio[value="';
                radioSelector += variant.options[i] +'"]';

                radioButton = form.find(radioSelector);

                if (radioButton.size()) {
                    radioButton.get(0).checked = true;
                }
            }
        }
        // END SWATCHES
        
    };

    jQuery(function($) {

        new Shopify.OptionSelectors('productSelect', {
            product: {{ product | json }},
            onVariantSelected: selectCallback
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
    {% endif %}

        // Hide selectors if we only have 1 variant and its title contains 'Default'.
        {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
        $('.selector-wrapper').hide();
        {% endif %}

        // Auto-select first available variant on page load. Otherwise the product looks sold out.
        {% assign found_one_in_stock = false %}
        {% for variant in product.variants %}
        {% if variant.available and found_one_in_stock == false %}
        {% assign found_one_in_stock = true %}
        {% for option in product.options %}
        $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }}).trigger('change');
        {% endfor %}
        {% endif %}
        {% endfor %}

    });
</script>
