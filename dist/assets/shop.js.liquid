window.timber = window.timber || {};

timber.cache = {
    // General
    $window: $(window),
    $html: $('html'),
    $body: $('body'),

    // Navigation
    $navigation: $('#accessibleNav'),

    // Product Page
    productPage: {
        $mainImage: $('#productPhotoImg'),
        $thumbImages: $('#productThumbs').find('a.product-photo-thumb'),
        $newImage: null,
        $mobileHeaderLink: $('#mobileProductHeaderLink'),
        $infoBlock: $('#productInfoBlock'),
        $descriptionToggle: $('#descriptionToggle')
    },

    // Celebrity Gallery
    $celebrityGallery: $('.celebrity-gallery-hero'),
    $celebritySlides: $('.celebrity-gallery .slide'),
    $celebrityThumbs: $('.celebrity-gallery .thumb'),

    // Mobile Slide Out Navigation
    mobileSideNav: {
        $bodyContainer: $('#body-container'),
        $headerContainer: $('#header-container'),
        $bothContainers: $('#body-container, #header-container'),
        $toggle: $('#sideNavToggle'),
        $nav: $( '#mobileSideNav' ),
        $subMenuLinks: $('.main-menu-link.js-has-sub-menu'),
        $subMenus: $('.sub-menu-mobile')
    },

    // homepage
    homepage: {
        $body: $('body.template-index'),
        $splashScroller: $('#homepage-splash-scroller'),
        $hero: $('#homepage-hero'),
        $splash: $('#homepage-splash')
    },

    headerSubNav: {
        $row: $('.site-header-sub-row'),
        $subMenus: $('.js-header-sub-menu'),
        $mainMenu: $('.site-header .main-menu')
    },

    contactForm: {
        $form: $('.contact-form'),
        $styleNumber: $('#contactFormStyleNumber')
    }
};

timber.init = function () {

    // Run on load
    timber.accessibleNav();
    timber.productImageSwitch();
    timber.carouselInit();
    timber.loginFormInit();
    timber.celebrityGallery();
    timber.mobileSideNav();
    timber.mobileProductInfoBlock();
    timber.productDescriptionBlock();
    timber.loader.init();
    timber.homepageInit();
    timber.headerSubNav();
    timber.contactForm();

    // initialize smooth scroll
    smoothScroll.init();
};

timber.contactForm = function(){
    var styleNumber = timber.getUrlVars()['style_number'];
    timber.cache.contactForm.$styleNumber.val(styleNumber);
};

timber.getUrlVars = function () {
    var result = {};
    var location = window.location.href.split('#');
    var parts = location[0].replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        result [key] = value;
    });
    return result ;
};

timber.homepageInit = function(){
    // if not on the homepage, return
    if (timber.cache.homepage.$body.length === 0){
        return;
    }

    timber.homepageSplash();
};

timber.homepageSplash = function(){
    var scroll = timber.cache.homepage.$splashScroller,
        splash = timber.cache.homepage.$splash;

    scroll.click(function(e){
        e.preventDefault();
        
        $splash.addClass('js-splash-hidden');
    });

    // when the user starts scrolling we want the feeling of a weighted 
    var $splash = timber.cache.homepage.$splash,
        $window = timber.cache.$window;

    var threshold = -128;
    var scrollDelta = 0; // this is the total of how much the user has scrolled so far
    
    $window.on('mousewheel.homepage-splash', function(event) {
        // get the delta
        var deltaY = event.deltaY * event.deltaFactor;
        
        scrollDelta = scrollDelta + deltaY;

        // scroll ceiling
        if (scrollDelta > 0){
            scrollDelta = 0;
        }

        if (scrollDelta < threshold){
            $splash.addClass('js-splash-hidden');
        } else if ($('#body-container').scrollTop() === 0 && $splash.hasClass('js-splash-hidden')){
            // if the user is at the top of the page and the splash is hidden we want to show it again
            $splash.removeClass('js-splash-hidden');
        }
    });
    
    var splashDismiss = new Hammer($splash[0]);
    splashDismiss.on('panup', function(ev) {
        console.log(ev);
        if (!$splash.hasClass('js-splash-hidden')){
            $splash.addClass('js-splash-hidden');
        }
    });    
    
    var splashRestore = new Hammer($('body')[0]);
    splashRestore.on('pandown', function(ev) {
        console.log(ev);
        if ($('#body-container').scrollTop() === 0 && $splash.hasClass('js-splash-hidden')){
            $splash.removeClass('js-splash-hidden');
        }

    });    
    
};

timber.switchClass = function( $el, c1, c2){
    if ( $el.hasClass(c1) ) {
        $el.removeClass(c1);
        $el.addClass(c2);
    } else {
        $el.removeClass(c2);
        $el.addClass(c1);
    }
};

timber.productDescriptionBlock = function(){

    var $toggle = timber.cache.productPage.$descriptionToggle,
        $infoBlock = timber.cache.productPage.$infoBlock,
        $icon = $toggle.find('.icon'),
        $content = $infoBlock.find('.content');

    $toggle.click(function(e){
        e.preventDefault();

        $content.scrollTop(0);
        $infoBlock.toggleClass('description-expanded');
        timber.switchClass( $icon, 'up', 'down' );
    });
};

timber.mobileProductInfoBlock = function(){

    var $toggle = timber.cache.productPage.$mobileHeaderLink,
        $icon = $toggle.find('.icon'),
        $infoBlock = timber.cache.productPage.$infoBlock;

    $toggle.click(function(e){
        e.preventDefault();

        // flip the arrow icon
        timber.switchClass( $icon, 'up', 'down' );

        $infoBlock.toggleClass('expanded');
    });
};

timber.mobileSideNav = function(){

    var $body = timber.cache.$body,
        $bodyContainer = timber.cache.mobileSideNav.$bodyContainer,
        $headerContainer = timber.cache.mobileSideNav.$headerContainer,
        $bothContainers = timber.cache.mobileSideNav.$bothContainers,
        $toggle = timber.cache.mobileSideNav.$toggle,
        $nav = timber.cache.mobileSideNav.$nav,
        $subMenuLinks = timber.cache.mobileSideNav.$subMenuLinks,
        $subMenus = timber.cache.mobileSideNav.$subMenus,
        isOpen = false;

    $toggle.click(function(e) {
        e.preventDefault();
        e.stopPropagation();

        if (isOpen){
            timber.mobileSideNav.close();
        } else {
            timber.mobileSideNav.open();
        }
    });

    // close the side menu when user clicks on the body or the header when open.
    $bothContainers.click(function(e){
        if ( isOpen ){
            timber.mobileSideNav.close();
        }
    });

    this.mobileSideNav.open = function(){
        $bothContainers.addClass( 'menu-open' );
        $body.addClass('js-no-scroll');
        $nav.addClass( 'open' );
        isOpen = true;
    };

    this.mobileSideNav.close = function(){
        $bothContainers.removeClass( 'menu-open' );
        $body.removeClass('js-no-scroll');
        $nav.removeClass( 'open' );
        isOpen = false;
    };

    // side nav sub menus

    // get the natural hight of the sub menus to allow for the transition animations to work.

    // open the submenus.
    openSubMenus();
    $subMenus.each(function(i){
        var $currMenu = $(this),
            height = $currMenu.height();

        $currMenu.attr('data-height', height);
    });
    closeSubMenus();

    $subMenuLinks.click(function(event){
        event.preventDefault();

        // get the target name, format the id, get the element
        var $this = $(this),
            target = $this.data('target'),
            targetIdSelector = '#sub-menu-mobile-' + target,
            $targetMenu = $(targetIdSelector);

        if (isSubMenuOpen($targetMenu)){
            // close the menu and any others
            closeSubMenus();
        } else {
            // close any menus and open the menu
            closeSubMenus();
            openSubMenu($this, $targetMenu);
        }
    });

    function isSubMenuOpen($menu){
        return $menu.hasClass('js-open');
    }

    function closeSubMenus(){
        $subMenuLinks.removeClass('active');
        $subMenus.removeClass('js-open');
        $subMenus.css('height', 0);
    }

    function openSubMenu($link, $subMenu){
        $subMenu.addClass('js-open');
        $subMenu.css('height', $subMenu.data('height'));
        $link.addClass('active');
    }

    function openSubMenus(){
        $subMenuLinks.addClass('active');
        $subMenus.addClass('js-open');
    }
};

timber.celebrityGallery = function(){

    // get elements
    var $gallery = timber.cache.$celebrityGallery,
        $slides = timber.cache.$celebritySlides,
        $thumbs = timber.cache.$celebrityThumbs;

    // wire click actions
    $thumbs.click(function(e){
        e.preventDefault();

        var $this = $(this),
            $targetSlide = $( $this.attr('href') ),
            bgColor = $targetSlide.data('bgColor');

        $thumbs.removeClass('active');
        $slides.removeClass('active');

        $this.addClass('active');
        $targetSlide.addClass('active');
        $gallery.css('backgroundColor', bgColor);

    });
};

timber.headerSubNav = function(){

    // get elements
    var $subNavRow = timber.cache.headerSubNav.$row,
        $subMenus = timber.cache.headerSubNav.$subMenus,
        $availableOnlineSubMenu = $('#sub-menu-desktop-available-online'),
        $exclusiveSubMenu = $('#sub-menu-desktop-exclusive'),
        $mainMenu = timber.cache.headerSubNav.$mainMenu,
        $subMenuLinks = $mainMenu.find('#available-online-header-main-menu-link, #exclusive-header-main-menu-link'),
        $shopLink = $mainMenu.find('#available-online-header-main-menu-link'),
        $collectionsLink = $mainMenu.find('#exclusive-header-main-menu-link'),
        menuClosetimeoutId;

    // set the sub menu left offset to be the same as the link
    function setMenuHorizontalPositions(){
        var shopLinkLeftOffset = $shopLink.offset().left,
            collectionsLinkLeftOffset = $collectionsLink.offset().left;

        $availableOnlineSubMenu.css('left', shopLinkLeftOffset);
        $exclusiveSubMenu.css('left', collectionsLinkLeftOffset);
        console.log('setting positions');
    }
    setMenuHorizontalPositions();

    // and set them anytime the window is resized.
    $(window).resize(function(event){
        setMenuHorizontalPositions();
    });

    // when the user mouses over a sub menu link
    $subMenuLinks.mouseenter(function(event){

        // get the target name, format the id, get the element
        var $this = $(this),
            target = $this.data('target'),
            targetIdSelector = '#sub-menu-desktop-' + target,
            $targetMenu = $(targetIdSelector);

        // if another menu is open
        if ($subMenus.hasClass('js-open') && !$targetMenu.hasClass('js-open')){
            $subMenus.removeClass('js-open');
            $subMenuLinks.removeClass('active');
            $targetMenu.addClass('js-open');
            $this.addClass('active');
        } else if (!$subMenus.hasClass('js-open')) {
            // no menus are open, so open the target
            $targetMenu.addClass('js-open');
            $this.addClass('active');
        }
    });

    // when the user mouses away from the main nav or the open sub nav menu start a timeout
    // when the time out finishes
    $mainMenu.mouseleave(function(event){
        menuClosetimeoutId = window.setTimeout(closeSubMenus, 600);
    });
    $subMenus.mouseleave(function(event){
        menuClosetimeoutId = window.setTimeout(closeSubMenus, 600);
    });
    $mainMenu.mouseenter(function(event){
        window.clearTimeout(menuClosetimeoutId);
    });
    $subMenus.mouseenter(function(event){
        window.clearTimeout(menuClosetimeoutId);
    });

    function closeSubMenus(){
        $subMenus.removeClass('js-open');
        $subMenuLinks.removeClass('active');
    }
};

timber.loginFormInit = function(){

    /*
     Show/hide the recover password form when requested.
     I'd suggest using some CSS3 transitions to make this change look cool,
     but this gets the job done for now.
     */
    function showRecoverPasswordForm(e) {
        if (typeof e !== 'undefined') {
            e.preventDefault();
        }

        $('.recover-password-block').show();
        $('.login-block').hide();
    }

    function hideRecoverPasswordForm(e) {
        e.preventDefault();

        $('.recover-password-block').hide();
        $('.login-block').show();
    }

    // Allow deep linking to the recover password form
    if (window.location.hash == '#recover') {
        showRecoverPasswordForm();
    }

    $('.forgot-passowrd-link').click(showRecoverPasswordForm);
    $('.cancel-forgot-password-link').click(hideRecoverPasswordForm);

    // reset_success is only true when the reset form is
    {% if reset_success %}
    document.getElementById('resetSuccess').style.display = 'block';
    {% endif %}
};

timber.carouselInit = function () {
    $('.carousel').slick({
        dots: true,
        prevArrow: '<a href="#" class="slick-prev"></a>',
        nextArrow: '<a href="#" class="slick-next"></a>',
        customPaging: function(slider, i) {
            return '<a href="#">' + (i + 1) + '</a>';
        }
    });
};

timber.accessibleNav = function () {
    var $nav = timber.cache.$navigation,
        $allLinks = $nav.find('a'),
        $topLevel = $nav.children('li').find('a'),
        $parents = $nav.find('.site-nav--has-dropdown'),
        $subMenuLinks = $nav.find('.site-nav--dropdown').find('a'),
        activeClass = 'nav-hover',
        focusClass = 'nav-focus';

    // Mouseenter
    $parents.on('mouseenter touchstart', function(evt) {
        var $el = $(this);

        if (!$el.hasClass(activeClass)) {
            evt.preventDefault();
        }

        showDropdown($el);
    });

    // Mouseout
    $parents.on('mouseleave', function() {
        hideDropdown($(this));
    });

    $subMenuLinks.on('touchstart', function(evt) {
        // Prevent touchstart on body from firing instead of link
        evt.stopImmediatePropagation();
    });

    $allLinks.focus(function() {
        handleFocus($(this));
    });

    $allLinks.blur(function() {
        removeFocus($topLevel);
    });

    // accessibleNav private methods
    function handleFocus ($el) {
        var $subMenu = $el.next('ul');
        hasSubMenu = $subMenu.hasClass('sub-nav') ? true : false,
        isSubItem = $('.site-nav--dropdown').has($el).length,
        $newFocus = null;

        // Add focus class for top level items, or keep menu shown
        if ( !isSubItem ) {
            removeFocus($topLevel);
            addFocus($el);
        } else {
            $newFocus = $el.closest('.site-nav--has-dropdown').find('a');
            addFocus($newFocus);
        }
    }

    function showDropdown ($el) {
        $el.addClass(activeClass);

        setTimeout(function() {
            timber.cache.$body.on('touchstart', function() {
                hideDropdown($el);
            });
        }, 250);
    }

    function hideDropdown ($el) {
        $el.removeClass(activeClass);
        timber.cache.$body.off('touchstart');
    }

    function addFocus ($el) {
        $el.addClass(focusClass);
    }

    function removeFocus ($el) {
        $el.removeClass(focusClass);
    }
};

timber.productImageSwitch = function () {
    if ( !timber.cache.productPage.$thumbImages.length ) {
        return;
    }

    // Switch the main image with one of the thumbnails
    // Note: this does not change the variant selected, just the image
    timber.cache.productPage.$thumbImages.on('click', function(e) {
        e.preventDefault();
        timber.cache.productPage.$newImage = $(this).attr('href');
        timber.cache.productPage.$mainImage.attr({ src: timber.cache.productPage.$newImage });

        // change the loupe image
        $('.loupe img').attr({ src: timber.cache.productPage.$newImage });
    });
};

timber.loader = {
    element: '',
    selector: '.spinner',

    init: function(){
        // get loader template
        timber.loader.element = $('#loaderAnimationTemplate').html();
    },

    show: function( target ){
        // append the loader element to the target element and show it

        if ( typeof target === 'undefined' ) {
            return;
        }

        $( target ).append( timber.loader.element );
    },

    hide: function( target ){
        // hide the loader element in the target

        if ( typeof target === 'undefined' ) {
            return;
        } else {
            $( target ).hide();
        }
    },

    destroy: function( target ){
        if( typeof target === 'undefined' ){
            // no target element, hide and destroy all loader animations
            return;
        } else {
            // hide and destroy the loader in the target element
            $( target ).remove();
        }
    }
};

// Initialize Timber's JS on docready
$(function() {
    window.timber.init();
});
