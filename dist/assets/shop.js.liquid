window.timber = window.timber || {};

timber.cache = {
    // General
    $window: $(window),
    $html: $('html'),
    $body: $('body'),

    // Navigation
    $navigation: $('#accessibleNav'),

    // Product Page
    productPage: {
        $body: $('.template-product'),
        $mobileHeaderLink: $('#mobileProductHeaderLink'),
        $infoBlock: $('#productInfoBlock'),
        $descriptionToggle: $('#descriptionToggle'),
        $productOptions: $('.product-options-block'),
        gallery: {
            $mainImageBlock: $('#mainImageBlock'),
            $thumbBlock: $('#productThumbs')
        },
        $backLink: $('.product-back-link')
    },

    // Mobile Slide Out Navigation
    mobileSideNav: {
        $bodyContainer: $('#body-container'),
        $headerContainer: $('#header-container'),
        $bothContainers: $('#body-container, #header-container'),
        $toggle: $('#sideNavToggle'),
        $nav: $( '#mobileSideNav' ),
        $subMenuLinks: $('#mobileSideNav .main-menu-link.js-has-sub-menu'),
        $subMenus: $('.sub-menu-mobile')
    },

    homepage: {
        $body: $('body.template-index'),
        $hero: $('#homepage-hero'),
        $splashScroller: $('#homepage-splash-scroller'),
        $splash: $('#homepage-splash'),
        $videoBlock: $('#block-navigation-video-player'),
        $videoContainer: $('#homepage-video-container'),
        $videoPlayer: $('#homepage-video-player'),
        $headerWaypoint: $('.js-header-waypoint'),
        $headerContainer: $('#header-container'),
        $scrollBody: $('#body-container')
    },

    headerSubNav: {
        $row: $('.site-header-sub-row'),
        $subMenus: $('.js-header-sub-menu'),
        $mainMenu: $('.site-header .main-menu')
    },

    contactForm: {
        $form: $('.contact-form'),
        $styleNumberInput: $('#contactFormStyleNumber'),
        $styleNumberInquiryBlock: $('#styleNumberInquiryBlock'),
        $styleNumberInquiryBlockNumber: $('#styleNumberInquiryBlock .js-number')
    },

    collectionShop: {
        $body: $('body.template-collection-shop')
    },
    
    collectionLookbook: {
        $body: $('body.template-collection-lookbook')
    },

    collectionPage: {
        $body: $('body.template-collection'),
        $itemContainer: $('#collection-items'),
        $filterSelect: $('#product-tag-filter')
    },

    heroCarousel: {
        $carousel: $('.collection-hero-carousel')
    }
};

// used for passing in data from local pages through script tags
timber.pageData = {
    productPage: {}
};

timber.init = function () {
    // Run on load
    timber.accessibleNav();
    timber.carouselInit();
    timber.loginFormInit();
    timber.mobileSideNav();
    timber.loader.init();
    timber.homepageInit();
    timber.headerSubNav();
    timber.contactForm();
    
    // product page
    if (timber.cache.productPage.$body.length !== 0){
        timber.productPage();
    }
    
    // collection pages (both lookbook and shop)
    if (timber.cache.collectionPage.$body.length !== 0){
        timber.collectionPage();
    }
    
    if (timber.cache.heroCarousel.$carousel.length !== 0){
        timber.heroCarousel();
    }
    
    // initialize smooth scroll
    smoothScroll.init();
};

timber.heroCarousel = function(){
    var $carousel = timber.cache.heroCarousel.$carousel;

    $carousel.slick({
        prevArrow: '<a href="#" class="slick-prev"></a>',
        nextArrow: '<a href="#" class="slick-next"></a>',
        autoplay: true,
        fade: true,
        autoplaySpeed: 3500,
        speed: 1500
    });
};

timber.collectionPage = function(){
    var pager = new timber.infiniteScroll();
    
    if (timber.cache.collectionPage.$filterSelect.length !== 0){
        timber.productTagFilter();
    }
    
    // lookbook pages
    if (timber.cache.collectionLookbook.$body.length !== 0){
        timber.lookbookPageNew(pager);
    }
    
    // shop pages
    if (timber.cache.collectionShop.$body.length !== 0){
        timber.shopPage(pager);
    }
}

timber.productTagFilter = function(){
    var $filterSelect = timber.cache.collectionPage.$filterSelect;

    $filterSelect.change(function(event){
        var $select = $(this),
            $selectedOption = $select.find(':selected');
        
        window.location.href = $selectedOption.val();
    });
}

timber.lookbookPageNew = function(pager){
    var pageElementSelector = '#collection-items',
        itemElementSelector = '.lookbook-grid-item',
        carouselTemplate = Handlebars.compile(
            $('#lookbook-modal-carousel-template').html()
        ),
        slideTemplate = Handlebars.compile(
            $('#lookbook-carousel-slide-template').html()
        ),
        $itemContainer = $(pageElementSelector),
        $items = $itemContainer.find(itemElementSelector),
        $currentItem = null,
        $modal = null,
        pageSize = getAttrInt($itemContainer, 'data-page-size'),
        totalPages = getAttrInt($itemContainer, 'data-total-pages'),
        totalItems = getAttrInt($itemContainer, 'data-total-items');
    
    // wire the initial modal callbacks
    $items.click(openModal);
    
    // set callback to wire modals opening on page load
    pager.setOptions({
        processFilteredData: function($items){
            return $items.click(openModal);
        }
    })
    
    $itemContainer.on('pageLoadDone.infiniteScroll', function(event){
        console.log('page loaded');
        refresh$items();
    });
    
    function openModal(event){
        event.preventDefault();
        
        // get the item index
        var $clickedItem = $(this),
            clickedItemIndex = getAttrInt($clickedItem, 'data-item-index');

        // set the $currentItem
        $currentItem = $clickedItem;
        
        vex.open({
            showCloseButton: true,
            escapeButtonCloses: true,
            className: 'vex-lookbook-modal',
            closeClassName: 'lookbook-modal-close',
            // events
            afterOpen: function($vexContent){
                $vexContent.append(carouselTemplate({}));
                
                $modal = $vexContent;
                
                initCarousel(clickedItemIndex);
            },
            beforeClose: function($vexContent){
                // scroll to the current item on the page behind hte modal
                // and have it vertically centered on the page.
                $('body').scrollTop($currentItem.offset().top - (($(window).height() - $currentItem.height())/2));
            },
            afterClose: function($vexContent){
                $modal = null;
                $currentItem = null;
            }
        });
    }

    function initCarousel(selectedIndex){
        
        // gather the needed slide data from the page items
        var slidesHtml = '',
            numberFlanking = 2, // number of slides ahead and behind the current slide
            numberFlankingBehind = numberFlanking,
            numberFlankingAhead = numberFlanking + 1,
            currentIndex = selectedIndex,
            startIndex = selectedIndex - numberFlankingBehind,
            endIndex = selectedIndex + numberFlankingAhead, // .slice() works with the indexes between the elements
            $carousel = $modal.find('.lookbook-carousel'),
            pageUrl = window.location.href;
        
        if (startIndex < 0){
            startIndex = 0;
        }
        
        if (endIndex >= $items.length){
            endIndex = $items.length; // .slice() works with indexes beteen elements.
        }
        
        // load another page of items if needed
        
        // create the first set of slides for the carousel
        $items
            .slice(startIndex, endIndex)
            .each(function(index){
                var $item = $(this);
                
                // add the slide html
                $carousel.append(getSlideHtml($item));
            });

        function getSlideHtml($item){
            
            var index = $item.attr('data-item-index'),
                title = $item.attr('data-title'),
                styleNumber = $item.attr('data-style-number'),
                imageUrl = $item.attr('data-image-url'),
                itemClass = $item.attr('class').split(' ')[0],
                slideHtml = slideTemplate({
                    title: title,
                    styleNumber: styleNumber,
                    imageUrl: imageUrl,
                    imageUrlEncoded: window.encodeURIComponent(imageUrl),
                    pageUrlEncoded: window.encodeURIComponent(pageUrl),
                    descriptionEncoded: window.encodeURIComponent(title + ' - Style: ' + styleNumber),
                    itemIndex: index,
                    itemId: itemClass + '-' + index
                });
            
            return slideHtml;
        }
        
        // init the carousel
        $carousel.slick({
            prevArrow: '<a href="#" class="slick-prev"></a>',
            nextArrow: '<a href="#" class="slick-next"></a>',
            infinite: false,
            initialSlide: selectedIndex - startIndex,
            lazyLoad: 'ondemand'
        }).on('afterChange', function(event, slick, currentSlide){
            var currentSlideIndex = $carousel.slick('slickCurrentSlide'),
                $currentSlide = slick.$slides.eq(currentSlideIndex),
                currentItemIndex = getAttrInt($currentSlide, 'data-item-index');

            // save the current item
            $currentItem = $items.eq(currentItemIndex);
            
            // if we pass the item waypoint in the carousel
            // get next page
            if ($currentItem.is(pager.waypoint.element)){
                pager.getNextPage();
            }
            
            // add slides if needed
            if (slick.$slides.length - currentSlideIndex < numberFlankingAhead
                   && currentItemIndex + numberFlankingAhead <= $items.length){
                // add slide
                var slideHtmlAhead = getSlideHtml($items.eq(currentItemIndex + numberFlanking));
                $carousel.slick('slickAdd', slideHtmlAhead);
            }
            
            // if current Slide index is less than the number of flanking slides
            // we should add a slide to the beginning of the carousel
            // and only if the item index (of items on the page) is greater than the flanking number
            // since we are at the beginning of the items in the collection
            if (currentSlideIndex < numberFlankingBehind
                   && currentItemIndex - numberFlankingBehind >= 0){
                var slideHtmlBehind = getSlideHtml($items.eq(currentItemIndex - numberFlanking));
                $carousel.slick('slickAdd', slideHtmlBehind, true);
                // After the new item has been added to the beginning,
                // the currentSlide index should remain the same.
                slick.currentSlide++;
            }
        });
        
    }
    
    function refresh$items(){
        $items = $itemContainer.find(itemElementSelector);
    }

    function getAttrInt($item, attr){
        return parseInt($item.attr(attr), 10);
    }
}

timber.lookbookPage = function(pager){
    var $openModalLinks = $('.js-open-modal'),
        $modalContentBlock = $('#lookbook-gallery-modal'),
        $collectionItemsBlock = $('#collection-items'),
        $collectionItems = $collectionItemsBlock.find('.lookbook-grid-item');
    
    // init page objects
    var collection = new Collection(
        $collectionItemsBlock.attr('data-total-items'),
        $collectionItemsBlock.attr('data-total-pages'),
        $collectionItemsBlock.attr('data-page-size')
    );
    
    gatherPageData($collectionItemsBlock);
    
    function gatherPageData($page){
        var $items = $page.find('.lookbook-grid-item'),
            currentPage = new Page(
                $page.attr('data-has-next-page'),
                $page.attr('data-next-page-url') || null,
                $page.html()
            );
        
        collection.currentPage = currentPage;
        collection.pages.push(currentPage);
        
        $items.each(function(index){
            var $item = $(this);
            collection.items.push(
                new Item(
                    $item.attr('id'),
                    $item.attr('data-index'),
                    $item.attr('data-title'),
                    $item.attr('data-style-number'),
                    $item.attr('data-image-url')
                )
            );
        });
    }
    
    // wire the open modal handlers for the initial set of objects.
    $openModalLinks.click(openModal);
    
    function initModalCarousel(){
        
    }
    
    // open modals
    function openModal(event) {
        event.preventDefault();
        
        // gather data for this modal
        // gather data for the gallery
        // gather data for the current element
        var $this = $(this),
            itemIndex = parseInt($this.attr('data-item-index'), 10),
            modalContent = $modalContentBlock.html();
        
        // gather data for the prev/next 2 items in the lookbook
        var start = itemIndex - 2 >= 0 ? itemIndex - 2 : 0,
            end = itemIndex + 2 < collection.items.length ? itemIndex + 2 : collection.items.length - 1;
        
        start = itemIndex - 2;
        end = itemIndex + 2;

        if (start < 0){
            start = 0;
        }
        
        if (end >= collection.items.length){
            // is there another page after this?
            if (pager.hasNextPage()){
                // get the next page
                pager.getNextPage().done(function(data){

                });
            } else {
                end = collection.itmes.length - 1;
            }
        }
        
        // get gallery mustache template
        // create context object 
        // render template and insert into the vex modal
        // wire the carousel
        // on click next add the 3rd item ahead to the carousel
        // on click previous add the 3rd item behind to the carousel
        // if the 3rd item is not found
        // if looking ahead, is there another page
        // if so load it
        // if not then loop around to the first item on the page
        // if looking behind do nothing end of carousel
        
        vex.open({
            showCloseButton: true,
            escapeButtonCloses: true,
            content: modalContent,
            className: 'vex-lookbook-modal',
            afterOpen: wireImageCarousel,
            closeClassName: 'lookbook-modal-close'
        });
    }
    
    function wireImageCarousel(){
        var $carousel = this.$vexContent.find('.lookbook-modal-image-carousel');
        
        $carousel.slick({
            prevArrow: '<a href="#" class="slick-prev"></a>',
            nextArrow: '<a href="#" class="slick-next"></a>',
            infinite: false
        });
    }
    
    // this wires the open modal click callbacks on pages loaded
    // through ajax.
    pager.setOptions({
        processFilteredData: function($data){
            $data.find('.js-open-modal').click(openModal);
            
            return $data;
        },
        processPage: function($page){
            gatherPageData($page);
            
            return $page;
        }
    });
    
    // Models
    function Collection(totalItems, totalPages, pageSize){
        this.totalItems = totalItems;
        this.totalPages = totalPages;
        this.pageSize = pageSize;
        this.currentPage = null;
        this.pages = [];
        this.items = [];
    }
    
    function Page(hasNextPage, nextPageUrl, html){
        this.hasNextPage = hasNextPage;
        this.nextPageUrl = nextPageUrl;
        this.html = html;
    }
    
    function Item(id, index, title, styleNumber, imageUrl){
        this.id = id;
        this.index = index;
        this.title = title;
        this.styleNumber = styleNumber;
        this.imageUrl = imageUrl;
    }
};

timber.shopPage = function(pager){
    var $itemContainer = timber.cache.collectionPage.$itemContainer,
        scrollToTargetSelector = window.location.hash,
        scrollToElement = $itemContainer.find(scrollToTargetSelector),
        hasFoundScrollTarget = false;
    
    function isScrollElementLoaded(){
        return $itemContainer.find(scrollToTargetSelector).length !== 0;
    }
    
    function scrollToTarget(selector){
        smoothScroll.animateScroll(null, selector, {});
    }
    
    function getPageUntillScrollElementLoaded(){
        if (pager.hasNextPage() && !isScrollElementLoaded()){
            pager.getNextPage().done(function(data){
                getPageUntillScrollElementLoaded();
            });
        } else {
            scrollToTarget(scrollToTargetSelector);
        }
    }

    // if the element is on the page, use smoothScroll to scroll directly to it.
    if (isScrollElementLoaded()){
        scrollToTarget(scrollToTargetSelector);
        hasFoundScrollTarget = true;
        
    } else if (scrollToTargetSelector !== '') {
        getPageUntillScrollElementLoaded()
    }
}

timber.contactForm = function(){
    var styleNumber = timber.getUrlVars()['style_number'],
        $block = timber.cache.contactForm.$styleNumberInquiryBlock,
        $blockNumber = timber.cache.contactForm.$styleNumberInquiryBlockNumber,
        $styleNumberInput = timber.cache.contactForm.$styleNumberInput;
    
    if (styleNumber){
        $styleNumberInput.val(styleNumber);
        $blockNumber.text(styleNumber);
        $block.removeClass('js-hidden');
    }
};

timber.getUrlVars = function () {
    var result = {};
    var location = window.location.href.split('#');
    var parts = location[0].replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        result [key] = value;
    });
    return result ;
};

timber.homepageInit = function(){
    // if not on the homepage, return
    if (timber.cache.homepage.$body.length === 0){
        return;
    }
    
    if (timber.cache.homepage.$splash.length !== 0){
        timber.homepageSplash();
        timber.homepageOffsetHeader();
    }
    
    if (timber.cache.homepage.$videoBlock.length !== 0){
        timber.homepageVideo();
    }
};

timber.homepageOffsetHeader = function(){
    // on the home page we want to activate headroom.js when
    // scrolling up and the header hits the top of the screen.
    // then deactivate it at the same point on scroll down.
    // this allows the header to sit below the homepage splash but still
    // use headroom.js for showing hiding in the main body of the
    // page.
    
    var $container = timber.cache.homepage.$headerContainer, // headroom.js is applied to this element
        $waypoint = timber.cache.homepage.$headerWaypoint,
        // used as the context/scroller element for waypoints and headroom, needed to get around the full-viewport
        // css hacks used.
        $scrollBody = timber.cache.homepage.$scrollBody,
        headroomInstance = {}; // closure to hold the headroom instance between waypoint handler calls
    
    // create the waypoint for the header
    var headerWaypoint = $waypoint.waypoint({
        context: $scrollBody[0],
        handler: function(direction){
            if (direction === 'down'){
                headroomInstance = new Headroom($container[0], {
                    scroller: $scrollBody[0]
                });
                headroomInstance.init();
                $waypoint.addClass('js-headroom-active');
            } else {
                headroomInstance.destroy();
                $waypoint.removeClass('js-headroom-active');
            }
        },
        offset: function(){
            return - $(this.element).height();
        }
    });
};

// currently not used on the site. Perhaps get rid of this code later.
timber.homepageSplash = function(){
    var $splash = timber.cache.homepage.$splash,
        $scroll = timber.cache.homepage.$splashScroller,
        $body = timber.cache.homepage.$body;
    
    $scroll.click(function(event){
        event.preventDefault();
        
        $('#body-container').animate({scrollTop: $splash.height()});
    });
};

timber.homepageVideo = function(){
    var $block = timber.cache.homepage.$videoBlock,
        $blockInner = $block.find('.inner'),
        $playButton = $block.find('.play-link'),
        $videoContainer = timber.cache.homepage.$videoContainer,
        $playerIframe = timber.cache.homepage.$videoPlayer,
        player = $f($playerIframe[0]);
    
    // When the player is ready, add listeners for pause, finish, and playProgress
    player.addEvent('ready', function() {
        player.addEvent('pause', videoFinishPauseCallback);
        
        $playButton.click(playButtonCallback);
    });
    
    function playButtonCallback(event){
        event.preventDefault();

        $block.addClass('active');
        $videoContainer.addClass('active');
        player.api('play');

        transitionEnd($videoContainer[0]).bind(function(event){
            $block.addClass('hide-inner');
            transitionEnd($videoContainer[0]).unbind();
        });
    }
    
    function videoFinishPauseCallback(){
        $block.removeClass('active');
        $videoContainer.removeClass('active');
        player.api('unload');

        transitionEnd($videoContainer[0]).bind(function(event){
            $block.removeClass('hide-inner');
            transitionEnd($videoContainer[0]).unbind();
        });
    }
};

timber.switchClass = function( $el, c1, c2){
    if ( $el.hasClass(c1) ) {
        $el.removeClass(c1);
        $el.addClass(c2);
    } else {
        $el.removeClass(c2);
        $el.addClass(c1);
    }
};

timber.mobileSideNav = function(){

    var $body = timber.cache.$body,
        $bodyContainer = timber.cache.mobileSideNav.$bodyContainer,
        $headerContainer = timber.cache.mobileSideNav.$headerContainer,
        $bothContainers = timber.cache.mobileSideNav.$bothContainers,
        $toggle = timber.cache.mobileSideNav.$toggle,
        $nav = timber.cache.mobileSideNav.$nav,
        $subMenuLinks = timber.cache.mobileSideNav.$subMenuLinks,
        $subMenus = timber.cache.mobileSideNav.$subMenus,
        isOpen = false;

    $toggle.click(function(e) {
        e.preventDefault();
        e.stopPropagation();

        if (isOpen){
            timber.mobileSideNav.close();
        } else {
            timber.mobileSideNav.open();
        }
    });

    // close the side menu when user clicks on the body or the header when open.
    $bothContainers.click(function(e){
        if ( isOpen ){
            timber.mobileSideNav.close();
        }
    });

    this.mobileSideNav.open = function(){
        $bothContainers.addClass( 'menu-open' );
        $body.addClass('js-no-scroll');
        $nav.addClass( 'open' );
        isOpen = true;
    };

    this.mobileSideNav.close = function(){
        $bothContainers.removeClass( 'menu-open' );
        $body.removeClass('js-no-scroll');
        $nav.removeClass( 'open' );
        isOpen = false;
    };

    // side nav sub menus

    // get the natural hight of the sub menus to allow for the transition animations to work.

    // open the submenus.
    openSubMenus();
    $subMenus.each(function(i){
        var $currMenu = $(this),
            height = $currMenu.height();

        $currMenu.attr('data-height', height);
    });
    closeSubMenus();

    $subMenuLinks.click(function(event){
        event.preventDefault();

        // get the target name, format the id, get the element
        var $this = $(this),
            target = $this.data('target'),
            targetIdSelector = '#sub-menu-mobile-' + target,
            $targetMenu = $(targetIdSelector);

        if (isSubMenuOpen($targetMenu)){
            // close the menu and any others
            closeSubMenus();
        } else {
            // close any menus and open the menu
            closeSubMenus();
            openSubMenu($this, $targetMenu);
        }
    });

    function isSubMenuOpen($menu){
        return $menu.hasClass('js-open');
    }

    function closeSubMenus(){
        $subMenuLinks.removeClass('active');
        $subMenus.removeClass('js-open');
        $subMenus.css('height', 0);
    }

    function openSubMenu($link, $subMenu){
        $subMenu.addClass('js-open');
        $subMenu.css('height', $subMenu.data('height'));
        $link.addClass('active');
    }

    function openSubMenus(){
        $subMenuLinks.addClass('active');
        $subMenus.addClass('js-open');
    }
};

timber.headerSubNav = function(){
    
    // get elements
    var $mainMenu = timber.cache.headerSubNav.$mainMenu,
        $subNavRow = timber.cache.headerSubNav.$row,
        $subMenus = timber.cache.headerSubNav.$subMenus,
        $subMenuLinks = $mainMenu.find('.js-has-sub-menu'),
        $nonSubMenuLinks = $mainMenu.find('a:not(.js-has-sub-menu)'),
        menuClosetimeoutId,
        subMenuSelectorPrefix = '#header-sub-menu-',
        breakPointLarge = 1024,
        windowWidth = $(window).width();

    // set the sub menu left offset to be the same as the link
    function setMenuHorizontalPositions(){
        var $currentLink,
            currentOffset,
            currentTarget,
            $currentMenu;
        
        if (windowWidth > breakPointLarge){
            for (var i = 0; i<$subMenuLinks.length; i++){
                $currentLink = $subMenuLinks.eq(i);
                currentOffset = $currentLink.offset().left;
                currentTarget = $currentLink.attr('data-target');
                $currentMenu = $(subMenuSelectorPrefix + currentTarget);
                $currentMenu.css('left', currentOffset);
            }
        } else {
            for (var j = 0; j<$subMenuLinks.length; j++){
                $subMenus.css('left', 'auto');
            }
        }
    }
    setMenuHorizontalPositions();
    
    // **hack**
    // Safari is loading the page oddly. When the page first loads all the elements are to the left side
    // then they slide to the right into their correct positions. This causes the initial posistions of
    // the submenus to be too far to the left.
    // This behaviour is related to the css transitions I belive. Triggering the positioning function
    // after the transition time value seems to position the menus correctly. - AC 09/23/2015
    setTimeout(setMenuHorizontalPositions, 350);

    // and set them anytime the window is resized.
    $(window).resize(function(event){
        windowWidth = $(window).width();
        setMenuHorizontalPositions();
    });

    // when the user mouses over a sub menu link
    $subMenuLinks.mouseenter(function(event){
        // if we are at breakpoint large or bigger
        if (windowWidth > breakPointLarge){
            // get the target name, format the id, get the element
            var $menuLink = $(this);

            openSubMenu($menuLink);
        }
    });
    
    // when the user clicks on a sub menu link
    $subMenuLinks.click(function(event){
        var $menuLink = $(this);

        // if we are at breakpoint large or bigger
        if (windowWidth <= breakPointLarge || $menuLink.hasClass('js-disabled')){
            event.preventDefault();
            openSubMenu($menuLink);
        }
    });
    
    // when the user mouses away from the main nav or the open sub nav menu start a timeout
    // when the time out finishes
    $mainMenu.mouseleave(function(event){
        menuClosetimeoutId = window.setTimeout(closeSubMenus, 600);
    });
    $subMenus.mouseleave(function(event){
        menuClosetimeoutId = window.setTimeout(closeSubMenus, 600);
    });
    $mainMenu.mouseenter(function(event){
        window.clearTimeout(menuClosetimeoutId);
    });
    $subMenus.mouseenter(function(event){
        window.clearTimeout(menuClosetimeoutId);
    });
    
    $nonSubMenuLinks.mouseenter(closeSubMenus);
    
    function openSubMenu($link){
        // get the target name, format the id, get the element
        var target = $link.data('target'),
            targetIdSelector = subMenuSelectorPrefix + target,
            $targetMenu = $(targetIdSelector);
        
        // if another menu is open
        if ($subMenus.hasClass('js-open') && !$targetMenu.hasClass('js-open')){
            $subMenus.removeClass('js-open');
            $subMenuLinks.removeClass('active');
            $targetMenu.addClass('js-open');
            $link.addClass('active');
            
        } else if (!$subMenus.hasClass('js-open')) {
            // no menus are open, so open the target
            $targetMenu.addClass('js-open');
            $link.addClass('active');
        }
    }
    
    function closeSubMenus(){
        $subMenus.removeClass('js-open');
        $subMenuLinks.removeClass('active');
    }
};

timber.loginFormInit = function(){

    /*
     Show/hide the recover password form when requested.
     I'd suggest using some CSS3 transitions to make this change look cool,
     but this gets the job done for now.
     */
    function showRecoverPasswordForm(e) {
        if (typeof e !== 'undefined') {
            e.preventDefault();
        }

        $('.recover-password-block').show();
        $('.login-block').hide();
    }

    function hideRecoverPasswordForm(e) {
        e.preventDefault();

        $('.recover-password-block').hide();
        $('.login-block').show();
    }

    // Allow deep linking to the recover password form
    if (window.location.hash == '#recover') {
        showRecoverPasswordForm();
    }

    $('.forgot-passowrd-link').click(showRecoverPasswordForm);
    $('.cancel-forgot-password-link').click(hideRecoverPasswordForm);

    // reset_success is only true when the reset form is
    {% if reset_success %}
    document.getElementById('resetSuccess').style.display = 'block';
    {% endif %}
};

timber.infiniteScroll = function(settings){
    var defaults = {
        processFilteredData: false,
        processPage: false,
        collectionBlockSelector: '#collection-items'
    },
        options = $.extend({}, defaults, settings),
        self = this;
    
    // public methods
    this.setOptions = function(settings){
        options = $.extend(options, settings);
    }
    
    this.getNextPage = function(){
        // disable the current waypoint so that it doesn't trigger when scrolled past.
        self.waypoint.disable();
        
        // get next page
        return getNextPage();
    }
    
    this.hasNextPage = function(){
        return this.pageData.hasNextPage;
    }
    
    // private methods
    function getPageDataFromHtml($page){
        // run callback
        if (typeof options.processPage === 'function'){
            $page = options.processPage($page);
        }

        self.pageData = {};
        
        self.pageData.hasNextPage = $page.attr('data-has-next-page') === 'true';
        self.pageData.nextPageUrl = self.pageData.hasNextPage ? $page.attr('data-next-page-url') : null;
        self.pageData.$items = $page.children();
        self.pageData.$waypointElement = $page.children().first();
    }
    
    function wireWaypoint(){
        // add a way point to the last item currently shown on the page.
        self.waypoint = self.pageData.$waypointElement.waypoint({
            handler: waypointCallback,
            // IMPORTANT: if the waypoint offset is anywhere on the visible page
            // the user will be able to click on items ahead of the waypoint
            // this causes loading bugs with the slides of the carousel
            offset: '100%'
        })[0];
    }
    
    function waypointCallback() {
        // disables current waypoint
        this.disable();
        
        getNextPage();
    }

    function getNextPage(){
        if (self.pageData.hasNextPage){
            return getNextPagePromise()
                .done(processNextPagePromise);
        }
    }
    
    function getNextPagePromise(){
        return $.ajax({
            type: 'GET',
            dataType: "html",
            url: self.pageData.nextPageUrl
        });
    }

    function processNextPagePromise(data){
        getPageDataFromHtml($(data).find(options.collectionBlockSelector));
        
        // run callback
        if (typeof options.processFilteredData === 'function'){ 
            self.pageData.$items = options.processFilteredData(self.pageData.$items);
        }
        
        // append the items to the container
        self.$itemContainer.append(self.pageData.$items);
        
        if (self.pageData.hasNextPage){
            wireWaypoint();
        }

        self.$itemContainer.trigger('pageLoadDone.infiniteScroll');
    }
    
    // get the container and wire the waypoint if there is a next page.
    self.$itemContainer = $(options.collectionBlockSelector);
    $('.back-to-top-block').removeClass('js-hidden');
    $('.pagination-block').addClass('js-hidden');
    getPageDataFromHtml(self.$itemContainer);
    if (self.pageData.hasNextPage){
        wireWaypoint();
    }
};

timber.carouselInit = function () {
    $('.carousel').slick({
        dots: true,
        prevArrow: '<a href="#" class="slick-prev"></a>',
        nextArrow: '<a href="#" class="slick-next"></a>',
        customPaging: function(slider, i) {
            return '<a href="#">' + (i + 1) + '</a>';
        }
    });
};

timber.accessibleNav = function () {
    var $nav = timber.cache.$navigation,
        $allLinks = $nav.find('a'),
        $topLevel = $nav.children('li').find('a'),
        $parents = $nav.find('.site-nav--has-dropdown'),
        $subMenuLinks = $nav.find('.site-nav--dropdown').find('a'),
        activeClass = 'nav-hover',
        focusClass = 'nav-focus';

    // Mouseenter
    $parents.on('mouseenter touchstart', function(evt) {
        var $el = $(this);

        if (!$el.hasClass(activeClass)) {
            evt.preventDefault();
        }

        showDropdown($el);
    });

    // Mouseout
    $parents.on('mouseleave', function() {
        hideDropdown($(this));
    });

    $subMenuLinks.on('touchstart', function(evt) {
        // Prevent touchstart on body from firing instead of link
        evt.stopImmediatePropagation();
    });

    $allLinks.focus(function() {
        handleFocus($(this));
    });

    $allLinks.blur(function() {
        removeFocus($topLevel);
    });

    // accessibleNav private methods
    function handleFocus ($el) {
        var $subMenu = $el.next('ul');
        hasSubMenu = $subMenu.hasClass('sub-nav') ? true : false,
        isSubItem = $('.site-nav--dropdown').has($el).length,
        $newFocus = null;

        // Add focus class for top level items, or keep menu shown
        if ( !isSubItem ) {
            removeFocus($topLevel);
            addFocus($el);
        } else {
            $newFocus = $el.closest('.site-nav--has-dropdown').find('a');
            addFocus($newFocus);
        }
    }

    function showDropdown ($el) {
        $el.addClass(activeClass);

        setTimeout(function() {
            timber.cache.$body.on('touchstart', function() {
                hideDropdown($el);
            });
        }, 250);
    }

    function hideDropdown ($el) {
        $el.removeClass(activeClass);
        timber.cache.$body.off('touchstart');
    }

    function addFocus ($el) {
        $el.addClass(focusClass);
    }

    function removeFocus ($el) {
        $el.removeClass(focusClass);
    }
};

timber.productPage = function(){
    var pageData = timber.pageData.productPage;
    
    if (timber.cache.productPage.$productOptions.length !== 0){
        new Shopify.OptionSelectors('productSelect', {
            product: pageData.product,
            onVariantSelected: timber.productSelectCallback
        });
    }
    
    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    if (pageData.addSingleOptionLabel){
        $('.selector-wrapper:eq(0)').prepend('<label>' + pageData.singleOptionLabelText + '</label>');
    }
    
    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    if (pageData.hasSingleDefaultVariant){
        $('.selector-wrapper').hide();
    }
    
    // Auto-select first available variant on page load. Otherwise the product looks sold out.
    var foundVariantInStock = false;
    var currentVariant = null;
    for (var i=0; i<pageData.product.variants.length; i++){
        currentVariant = pageData.product.variants[i];
        if (currentVariant.available && !foundVariantInStock){
            foundVariantInStock = true;
            var currentOption = null;
            for (var j=0; j<pageData.product.options.length; j++){
                currentOption = pageData.product.options[j];
                $('.single-option-selector:eq(' + j + ')').val(currentVariant.options[j]).trigger('change');
            }
            break;
        }
    }
    
    // dress sizes popup link
    currentOption = null;
    for (var k=0; k<pageData.product.options.length; k++){
        currentOption = pageData.product.options[k];
        
        if (currentOption === 'Size'){
            $('.selector-wrapper:eq(' + k + ')').append('<a href="#modal-content-dress-size" id="dress-sizes-link" class="js-open-modal dress-sizing-link">Size Chart</a>');
        }
    }
    
    // wire the modal popup
    $('.js-open-modal').click(function(event) {
        event.preventDefault();

        var $this = $(this),
            modalContentSelector = $this.attr('href');

        vex.open({
            // default is no close button
            showCloseButton: true,
            escapeButtonCloses: true,
            // default is two buttons, we don't want that.
            // you need the padding at the top else your close button infringes on the content.
            // dump the table into the modal
            // content: $('#modal-content-dress-size').html(),
            content: $(modalContentSelector).html(),
            className: 'vex-theme-wireframe'
        });
    });
    
    timber.productImageGallery();
    timber.mobileProductInfoBlock();
    timber.productDescriptionBlock();
    timber.productBackLink();
    timber.productRecentlyViewedBlock();
}

timber.productBackLink = function(){
    var currentTagSlug = timber.getUrlVars()['tag'],
        $backLink = timber.cache.productPage.$backLink,
        $targetLabel = $backLink.find('.link-target-label'),
        href = $backLink.attr('href'),
        productTags = timber.pageData.productPage.tags,
        currentTag,
        hashIndex,
        newHref;
    
    if (typeof currentTagSlug === 'undefined' || typeof productTags === 'undefined'){
        return;
    }
    
    // get the current tag with it's unhandlized name, Could have
    // passed this through the query string but wanted to keep
    // the url clean.
    currentTag = $.grep(productTags, function(tag, index){
        return tag.slug === currentTagSlug;
    })[0];

    // split the query string off
    hashIndex= href.indexOf('#');
    newHref = href.substring(0, hashIndex) + currentTagSlug + '/' + href.substring(hashIndex);
    
    $backLink.attr('href', newHref);
    $targetLabel.text(currentTag.name);
};

timber.productSelectCallback = function(variant, selector) {

    var $body = $('body'),
        addToCart = $('#addToCart'),
        productPrice = $('#productPrice'),
        comparePrice = $('#comparePrice'),
        showProductWaitlist = timber.pageData.productPage.showProductWaitlist;

    if (showProductWaitlist) {
        addToCart.addClass('disabled').prop('disabled', true);
        addToCart.find('.label').text('Coming Soon');
    } else if (variant) {
        if (variant.available) {
            // We have a valid product variant, so enable the submit button
            addToCart.removeClass('disabled').prop('disabled', false);
            addToCart.find('.label').text('Add to Cart');

        } else {
            // Variant is sold out, disable the submit button
            addToCart.addClass('disabled').prop('disabled', true);
            addToCart.find('.label').text('Sold Out');
        }

        // Regardless of stock, update the product price
        productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    } else {
        // The variant doesn't exist, disable submit button.
        // This may be an error or notice that a specific variant is not available.
        // To only show available variants, implement linked product options:
        //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
        addToCart.val('Unavailable').addClass('disabled').prop('disabled', true);
    }
    
    // trigger event for selected color
    var currentSelector = {};
    for (var i = 1; i < selector.selectors.length; i++){
        currentSelector = selector.selectors[i];

        if (currentSelector.name === 'Color'){
            $body.trigger('colorChanged.productPage', {color: currentSelector.element.value});
        }
    }
};

timber.productImageGallery = function(){
    /*
     image gallery

     specs
     - only show photos of the color currently selected in the color dropdown.
     - preload the images so they switch faster
     - clicking on a thumb shows the image in the main area
     */
    
    var $mainBlock = timber.cache.productPage.gallery.$mainImageBlock,
        $thumbBlock = timber.cache.productPage.gallery.$thumbBlock,
        $mainImages = $mainBlock.find('.image-zoom-container'),
        $thumbLinks = $thumbBlock.find('a');
    
    $('body').on('colorChanged.productPage', function(event, data){
        $thumbLinks.removeClass('js-hidden');
        $thumbLinks.filter(':not([data-image-color="' + data.color + '"])').addClass('js-hidden');

        $mainImages.addClass('js-hidden');
        $mainImages.each(function(index){
            var $this = $(this),
                attachedToVariant = ($this.attr('data-attached-to-variant') === 'true'),
                imageColor = $this.attr('data-image-color');
            
            if (attachedToVariant && imageColor === data.color){
                $this.removeClass('js-hidden');
                return;
            }
        });
    });
    
    $thumbLinks.click(function(event){
        event.preventDefault();

        var imageId = $(this).attr('data-target-image-id');

        $('#' + imageId).removeClass('js-hidden');
        $mainImages.filter(':not(#' + imageId + ')').addClass('js-hidden');
    });

    $mainImages.each(function(index){
        var $image = $(this),
            width = $(window).width();

        if (width > 768){
            $image.zoom({
                touch: false
            });
        }
    });
}

timber.productRecentlyViewedBlock = function(){
    
    var maxRecentProducts = 8,
        cookieName = 'theia-recent-products',
        recentProducts = [],
        cookieData,
        // create a Product object from current product
        currentProduct = new Product(timber.pageData.productPage.product),
        $recentProductsContainer = $('#recent-products-block'),
        recentProductTemplate = Handlebars.compile(
            $('#recent-product-template').html()
        );
      
     console.log(timber.pageData.productPage.product);   

    function Product(data){
        if (data === undefined){
            return;
        }
        
        this.title = data.title;
        this.id = data.id;
        this.handle = data.handle;
        this.featured_image = data.featured_image;
        this.images = data.images;
        this.price = data.price;
        this.compare_at_price = data.compare_at_price;
        this.style_number = data.style_number;
        this.back_image = data.back_image;
        
    }

    Product.prototype.price_in_dollars = function(){
        return Shopify.formatMoney( this.price );
    }
    Product.prototype.compare_in_dollars = function(){
        return Shopify.formatMoney( this.compare_at_price );
    }

    Product.prototype.has_back_image = function(){
       return (this.images > 1) ? true : false ;
    }

    Product.prototype.on_sale = function(){
        return this.comape_at_price > this.price ? true : false;
    }

    Product.prototype.url = function(){
        var hostName = window.location.hostname,
            baseUrl = "http://"+hostName+"/",
            collectionProducts = "collections/shop/products/";

            return baseUrl + collectionProducts + this.handle;

    }

    // on page load
    // check for for the cookie
    if (Cookies.get(cookieName)){
        // load products from cookie
        cookieData = Cookies.getJSON(cookieName);

        // inistantiate Dresses from objects in array.
        if (cookieData !== undefined && cookieData.constructor === Array && cookieData.length > 0){
            for(var i = 0; i < cookieData.length; i++){
                recentProducts.push(new Product(cookieData[i]));
            }
        }
    }
    
    // add current Product to beginning of the recentProducts array
    // if the first product isn't the current product
    if (recentProducts[0] === undefined || recentProducts[0].id !== currentProduct.id){
        recentProducts.unshift(currentProduct);
    }
    
    // check to see if array is greater than max recent products length, trim array if needed
    if (recentProducts.length > maxRecentProducts){
        recentProducts = recentProducts.slice(0, maxRecentProducts);
    }
    
    // save data to cookie
    Cookies.set(cookieName, recentProducts);
    
    // build the html for the block
    for(var j = 0; j < recentProducts.length; j++){
        $('.recently-viewed-products-block').append(recentProductTemplate(recentProducts[j]));
    }

    function byteCount(s) { 
        return encodeURI(s).split(/%..|./).length - 1;
    }
};


timber.productDescriptionBlock = function(){

    var $toggle = timber.cache.productPage.$descriptionToggle,
        $infoBlock = timber.cache.productPage.$infoBlock,
        $icon = $toggle.find('.icon'),
        $content = $infoBlock.find('.content');

    $toggle.click(function(e){
        e.preventDefault();

        $content.scrollTop(0);
        $infoBlock.toggleClass('description-expanded');
        timber.switchClass( $icon, 'up', 'down' );
    });
};

timber.mobileProductInfoBlock = function(){

    var $toggle = timber.cache.productPage.$mobileHeaderLink,
        $icon = $toggle.find('.icon'),
        $infoBlock = timber.cache.productPage.$infoBlock;

    $toggle.click(function(e){
        e.preventDefault();

        // flip the arrow icon
        timber.switchClass( $icon, 'up', 'down' );

        $infoBlock.toggleClass('expanded');
    });
};

timber.loader = {
    element: '',
    selector: '.spinner',

    init: function(){
        // get loader template
        timber.loader.element = $('#loaderAnimationTemplate').html();
    },

    show: function( target ){
        // append the loader element to the target element and show it

        if ( typeof target === 'undefined' ) {
            return;
        }

        $( target ).append( timber.loader.element );
    },

    hide: function( target ){
        // hide the loader element in the target

        if ( typeof target === 'undefined' ) {
            return;
        } else {
            $( target ).hide();
        }
    },

    destroy: function( target ){
        if( typeof target === 'undefined' ){
            // no target element, hide and destroy all loader animations
            return;
        } else {
            // hide and destroy the loader in the target element
            $( target ).remove();
        }
    }
};

timber.isDefined = function(testVar){
    return typeof testVar !== 'undefined';
}

// Initialize Timber's JS on docready
$(function() {
    window.timber.init();
});
