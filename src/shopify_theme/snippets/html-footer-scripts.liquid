<!-- html-footer-scripts -->
{% comment %}
JS Plugins
{% endcomment %}
{{ 'api.jquery.js' | shopify_asset_url | script_tag }}

{{ 'noframework.waypoints.min.js' | asset_url | script_tag }}
{{ 'jquery.waypoints.min.js' | asset_url | script_tag }}
{{ 'handlebars.min.js' | asset_url | script_tag }}

{{ 'slick.min.js' | asset_url | script_tag }}
{{ 'moment.min.js' | asset_url | script_tag }}
{{ 'smooth-scroll.js' | asset_url | script_tag }}
{{ 'headroom.min.js' | asset_url | script_tag }}
{{ 'jQuery.headroom.min.js' | asset_url | script_tag }}
{{ 'jquery.cookie-1.4.1.min.js' | asset_url | script_tag }}
{{ 'cookies.min.js' | asset_url | script_tag }}
{{ 'vex.min.js' | asset_url | script_tag }}
{{ 'jquery.zoom.min.js' | asset_url | script_tag }}
{{ 'transition-end.min.js' | asset_url | script_tag }}

{% if template contains 'index' %}
  <script src="https://player.vimeo.com/api/player.js"></script>
{% endif %}

{% comment %}main js file{% endcomment %}
{{ 'shop.js' | asset_url | script_tag }}

{% comment %}
Ajaxify your cart with this plugin. Adding a product will reveal a drawer, modal, or confirmation button.
Enabled by default in theme settings.

Ajaxify Cart Documentation:
- http://shopify.com/timber#ajax-cart
{% endcomment %}
{% if settings.ajax_cart and top-level-layout != 'simplified' %}
  {% include 'ajax-cart-template' %}
  {{ 'ajaxify.js' | asset_url | script_tag }}
  <script>
      jQuery(function($) {
          ajaxifyShopify.init({
              method: '{{ settings.ajax_cart_method }}', // Method options are drawer, modal, and flip. Default is drawer.
              wrapperClass: null, // The class that defines your site width. Default is null.
              formSelector: 'form[action^="/cart/add"]', // Default is form[action^="/cart/add"].
              addToCartSelector: '.add-to-cart-button', // Default is input[type="submit"] within 'formSelector'.
              cartCountSelector: '#cartCount', // Update number of items in the cart when a product is added. Default is null.
              cartCostSelector: '#cartCost', // Update the total cart cost when a product is added. Default is null.
              toggleCartButton: '.js-cart-toggle', // To toggle drawer/modal cart, include the selector here. Default is null and will take you to /cart page.
              useCartTemplate: false, // True to use cart.liquid markup. False to use handlebars.js for template. Default is true.
              btnClass: 'btn', // Your main button class for styling purposes if useCartTemplate is set to false. Default is null.
              moneyFormat: {{ shop.money_format | json }}, // Your shop money format, defined in liquid.
              disableAjaxCart: false, // If for some reason you want to disable the cart, set to true. Default is false.
              enableQtySelectors: true, // Enable the quantity selectors on your templates, even if disableAjaxCart is false. Default is true.
              prependDrawerTo: '.header-container', // The element selector where the cart is prepended. This is used for the drawer and flip methods. Default is 'body'.
              onToggleCallback: null
          });
      });
  </script>
{% endif %}

{% comment %}
<!-- SpurIT_Wishlist_Include -->
{% include 'wishlist-popup' %}
<!-- /SpurIT_Wishlist_Include -->
{% endcomment %}


{% include 'loader-animation-template' %}

{% if template contains 'product' %}
  {% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
  - Hides your <select> tag from above
  - Breaks out the product variants into separate product options, if more than one exists
  - Generates a <select> tag for each product option

  Callback notes:
  - Keep the callback available to the global scope (window.selectCallback) so that advanced
  addons can override it.
  * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
  {% endcomment %}

  {{ 'option_selection.js' | shopify_asset_url | script_tag }}
  <script>
      timber.pageData.productPage = {

          {% if is_bridesmaids %}
          isBridesmaidsPage: true,
          {% elsif is_bridal %}
          isBridalPage: true,
          {% else %}
          isShopPage: true,
          {% endif %}

          {% if product.tags contains 'waitlist' and product.available == false %}
          showProductWaitlist: true,
          {% else %}
          showProductWaitlist: false,
          {% endif %}

          {% comment %}
          Add label if only one product option and it isn't 'Title'. Could be 'Size'.
          {% endcomment %}
          {% if product.options.size == 1 and product.options.first != 'Title' %}
          addSingleOptionLabel: true,
          singleOptionLabelText: '{{ product.options.first | escape }}',
          {% else %}
          addSingleOptionLabel: false,
          {% endif %}

          {% comment %}
          Hide selectors if we only have 1 variant and its title contains 'Default'.
          {% endcomment %}
          {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
          hasSingleDefaultVariant: true,
          {% else %}
          hasSingleDefaultVariant: false,
          {% endif %}

          product: {{ product | json }},

          {% comment %}
          used to pass the non-handle tag names with their associated handles/slugs
          {% endcomment %}
          tags: [{% for tag in product.tags params %}
                 {
                     slug: '{{ tag | handle }}',
                     name: "{{ tag }}"
                 }{% unless forloop.last %},{% endunless %}{% endfor %}]
      };
  </script>

  {% comment %} sets the cookie data for recently viewed product {% endcomment %}

  <script>
      var product = timber.pageData.productPage.product;
      product.featured_image_alt = "{{ product.featured_image.alt }}";
      product.style_number = "{{ style_number }}";
  </script>

{% elsif template contains 'login' %}
  <script>
      timber.pageData.loginPage = {
          {% if reset_success %}
          resetSuccess: true;
          {% endif %}
      };
  </script>
{% endif %}

<!-- Pass data from Shoipfy liquid environment to javascript app -->
<script>
    /*
     * This data is used in the Page constructor, keep the structure as close to
     * the Shopify objects as possible.
     */
    window.theia = window.theia || {};
    window.theia.pageData = {
        // load the global objects
        canonical_url: {{ canonical_url | json }},
        current_page: {{ current_page | json }},
        handle: {{ handle | json }},
        page_description: {{ page_description | json }},
        page_title: {{ page_title | json }},
        settings: {{ settings | json }},
        template: {{ template | json }},
        cart: {{ cart | json }},
        order: {{ order | json }},
        search: {{ search | json }},
        billing_address: {{ billing_address | json }},
        shipping_address: {{ shipping_address | json }},
        current_tags: {{ current_tags | json }},
        page: {{ page | json }},
        theme: {{ theme | json }},
        article: {{ article | json }},
        collection: {{ collection | json }},
        customer_address: {{ customer_address | json }},
        blog: {
            all_tags: [{% for tag in blog.all_tags %}"{{ tag }}"{% unless forloop.last %},{% endunless %}{% endfor %}],
            articles: {{ blog.articles | json }},
            articles_count: {{ blog.articles_count | json }},
            are_comments_enabled: {{ blog.comments_enabled? | json }},
            handle: {{ blog.handle | json }},
            id: {{ blog.id | json }},
            is_moderated: {{ blog.moderated? | json }},
            next_article: {{ blog.next_article | json }},
            previous_article: {{ blog.previous_article | json }},
            tags: [{% for tag in blog.tags %}"{{ tag }}"{% unless forloop.last %},{% endunless %}{% endfor %}],
            title: {{ blog.title | json }},
            url: {{ blog.url | json }},
        },
        customer: {{ customer | json }},
        product: {{ product | json }}
    };

  {% assign shopify_image_sizes = "pico icon thumb small compact medium large grande original master"  | split: ' ' %}
  {% if product %}
  window.theia.pageData.product.images = [
      {% for image in product.images %}
      {
          "alt": "{{ image.alt }}",
          "is_attached_to_variant": {{ image.attached_to_variant? }},
          "id": {{ image.id }},
          "product_id": {{ image.product_id }},
          "position": {{ image.position }},
          "src": {
              {% for size in shopify_image_sizes %}"{{ size }}": "{{ image | img_url: size }}",{% endfor %}
          }
      },
      {% endfor %}
  ]
  {% endif %}
</script>

<!-- Load main app -->
{{ 'app.bundle.js' | asset_url | script_tag }}


<!--begin-bc-sf-filter-js-->
  {% include 'bc-sf-filter' %}
<!--end-bc-sf-filter-js-->
